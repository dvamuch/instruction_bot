const TelegramBot = require("node-telegram-bot-api");
const Instructions = require("./Instructions");
const VipInstructions = require("./VipInstructions");
const {join} = require("path");

class Bot {
  #bot;

  #secondInMilliseconds = 1000;
  #minuteInMilliseconds = 60 * this.#secondInMilliseconds;

  #executeInput = "‚úÖ–ó–∞–ø—É—Å—Ç–∏—Ç—å‚úÖ";
  #helpInput = "‚ùì–ü–æ–º–æ—â—å";
  #infoInput = "üìã–ò–Ω—Ñ–æ";
  #inviteInput = "üë§–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞";

  #projectName = process.env.PROJECT_NAME;
  #siteUrl = process.env.SITE_URL;
  #helpAccountUsername = process.env.HELP_ACCOUNT_USERNAME;
  #botUsername = process.env.TG_BOT_USERNAME;

  #helloText = `<b>${this.#projectName}</b> - –Ω–æ–≤–µ–π—à–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤–Ω—É—Ç—Ä–∏ Telegram, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è 100% –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π <b>–¥–∞—Å—Ç –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç 5000 —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å</b>. 

<b>–í–∞–∂–Ω–æ!</b> –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—É–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∏–¥–µ–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò–Ω—Ñ–æ¬ª. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–º–æ—â—å¬ª.`;

  #executeTextStage1 = `‚åõÔ∏è–ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...`;
  #executeTextStage2 = `‚öôÔ∏è–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...`;
  #executeTextStage3 = `‚ôªÔ∏è–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...`;
  #executeTextStage4 = `‚öúÔ∏è–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`;
  #executeTextFinish = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ`;

  #executeTimeoutText = `‚ùå–ë–æ—Ç –∑–∞–Ω—è—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.`;
  #executeTimeoutMap = new Set();

  #instructions;
  #vipInstructions;

  #helpText = `–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @${this.#helpAccountUsername}`;
  #helpReplyMarkup = {
    reply_markup: {
      inline_keyboard: [[{text: "–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", url: `https://t.me/${this.#helpAccountUsername}`}]],
    },
  };

  #infoText = `<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –≤–∏–¥–µ–æ –Ω–∏–∂–µüëáüèºüëáüèºüëáüèº`;
  #infoVideoFileId = null;
  #infoVideoPath = join(__dirname, "video_instruction.mp4");
  #infoVideoThumbnailPath = join(__dirname, "thumbnail.png");

  #inviteText1 = `<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>

–í—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–æ√´–º –ø—Ä–æ–µ–∫—Ç–µ. –í—ã —Å–∫–∏–¥—ã–≤–∞–µ—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ –¥—Ä—É–≥ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –∏ —è –¥–∞—é –≤–∞–º –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –æ—Ç 27.000‚ÇΩ.`;
  #inviteUrlText = `–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ –ø—Ä–æ–µ–∫—Ç ${this.#projectName}. ‚ö°Ô∏è–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å –Ω–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è`;

  #vipInstructionWelcomeText = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VIP –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:";
  #wrongCipInstructionText = "–í–∏–ø-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ –Ω–∏–∂–µ.";
  #isWaitingVipCodeInput = new Map();
  #vipReplyMarkup = {
    reply_markup: {
      inline_keyboard: [[{text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: this.#siteUrl}]],
    },
    parse_mode: "HTML",
  };
  #cancelVipReplyMarkup = {
    reply_markup: {
      inline_keyboard: [[{text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel-vip-code"}]],
    },
  };

  #instructionReplyMarkup = {
    reply_markup: {
      inline_keyboard: [
        [{text: "–ü–æ–ª—É—á–∏—Ç—å VIP –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data: "insert-vip-code"}],
        [{text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: this.#siteUrl}],
      ],
    },
    parse_mode: "HTML",
  };
  #menuReplyMarkup = {
    reply_markup: {
      keyboard: [
        [{text: this.#executeInput}],
        [{text: this.#helpInput}, {text: this.#infoInput}],
        [{text: this.#inviteInput}],
      ],
      resize_keyboard: true,
      is_persistent: true,
    },
    parse_mode: "HTML",
  };


  constructor() {
    this.#bot = new TelegramBot(process.env.TG_BOT_KEY, {polling: true});
    this.#instructions = new Instructions();
    this.#vipInstructions = new VipInstructions();
  }


  start() {
    console.log("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.");

    this.#bot.on("message", async (context) => {
      try {
        if (this.#isWaitingVipCodeInput[context.from.id]) {
          await this.#checkVipCode(context);
          return;
        }

        if (context.text.match(/^\/start \d+$/)) {
          console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç ${context.text.match(/^\/start (\d+)$/)[1]} –¥–ª—è ${context.from.id}.`);
          await this.sendHelloText(context);
          return;
        }

        switch (context?.text) {
          case "/start":
            await this.sendHelloText(context);
            break;
          case this.#executeInput:
            await this.#sendExecute(context);
            break;
          case this.#helpInput:
            await this.#sendHelp(context);
            break;
          case this.#infoInput:
            await this.#sendInfo(context);
            break;
          case this.#inviteInput:
            await this.#sendInvite(context);
            break;
          default:
            // do nothing
            break;
        }
      } catch (e) {
        console.log("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:");
        console.log(e.toString());
      }
    });

    this.#bot.on("callback_query", async (context) => {
      const {message, data, from} = context;

      if (data === "insert-vip-code") {
        await this.#bot.sendMessage(from.id, this.#vipInstructionWelcomeText, this.#cancelVipReplyMarkup);
        this.#isWaitingVipCodeInput[from.id] = true;
        return;
      }
      if (data === "cancel-vip-code") {
        await this.#bot.editMessageReplyMarkup({}, {chat_id: from.id, message_id: message.message_id});
        this.#isWaitingVipCodeInput[from.id] = false;
        return;
      }
    });
  }


  async sendHelloText(context) {
    await this.#bot.sendMessage(context.chat.id, this.#helloText, this.#menuReplyMarkup);
  }

  async #sendExecute(context) {
    const chatId = context.chat.id;

    if (this.#executeTimeoutMap.has(chatId)) {
      await this.#bot.sendMessage(chatId, this.#executeTimeoutText);
      return;
    }

    this.#executeTimeoutMap.add(chatId);
    setTimeout(() => this.#executeTimeoutMap.delete(chatId), 5 * this.#minuteInMilliseconds);

    const {message_id: messageId} = await this.#bot.sendMessage(chatId, this.#executeTextStage1);

    setTimeout(() => this.#editExecuteMessageToStage2(chatId, messageId), 10 * this.#secondInMilliseconds);
  }

  async #editExecuteMessageToStage2(chatId, messageId) {
    await this.#bot.editMessageText(this.#executeTextStage2, {chat_id: chatId, message_id: messageId});
    setTimeout(() => this.#editExecuteMessageToStage3(chatId, messageId), 3 * this.#secondInMilliseconds);
  };

  async #editExecuteMessageToStage3(chatId, messageId) {
    await this.#bot.editMessageText(this.#executeTextStage3, {chat_id: chatId, message_id: messageId});
    setTimeout(() => this.#editExecuteMessageToStage4(chatId, messageId), 3 * this.#secondInMilliseconds);
  };

  async #editExecuteMessageToStage4(chatId, messageId) {
    await this.#bot.editMessageText(this.#executeTextStage4, {chat_id: chatId, message_id: messageId});
    await this.#sendExecuteFinish(chatId);
  };

  async #sendExecuteFinish(chatId) {
    await this.#bot.sendMessage(chatId, this.#executeTextFinish);
    await this.#sendInstruction(chatId);
  };

  async #sendInstruction(chatId) {
    await this.#bot.sendMessage(chatId, this.#instructions.getInstructionMessage(), this.#instructionReplyMarkup);
  }

  async #sendInfo(context) {
    await this.#bot.sendMessage(context.chat.id, this.#infoText, {parse_mode: "HTML"});


    if (this.#infoVideoFileId) {
      await this.#bot.sendVideo(context.chat.id, this.#infoVideoFileId);
    } else {
      const message = await this.#bot.sendVideo(context.chat.id, createReadStream(this.#infoVideoPath), {
        width: 1104,
        height: 1898,
        duration: 89,
        thumb: this.#infoVideoThumbnailPath,
      });
      this.#infoVideoFileId = message.video.file_id;
      console.log(`–ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª file_id ${this.#infoVideoFileId}`);
    }
  }

  async #sendHelp(context) {
    await this.#bot.sendMessage(context.chat.id, this.#helpText, this.#helpReplyMarkup);
  }

  async #sendInvite(context) {
    await this.#bot.sendMessage(context.chat.id, this.#inviteText1, {parse_mode: "HTML"});

    const inviteLink = `t.me/${this.#botUsername}?start=${context.from.id}`;
    const inviteText2 = `–í–∞—à–∞ –ø–µ—Äc–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:

${inviteLink}

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –¥—Ä—É–∑—å—è–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`;
    const inviteTextMarkup = {
      reply_markup: {
        inline_keyboard: [[{
          text: "‚úÖ–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ –±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
          url: `tg://msg_url?url=${encodeURIComponent(inviteLink)}&text=${encodeURIComponent(this.#inviteUrlText)}`,
        }]],
      },
    };

    await this.#bot.sendMessage(context.chat.id, inviteText2, inviteTextMarkup);
  }

  async #checkVipCode(context) {
    const vipInstruction = this.#vipInstructions.getVipInstructionMessage(context.text);
    if (vipInstruction) {
      await this.#bot.sendMessage(context.chat.id, vipInstruction, this.#vipReplyMarkup);
      this.#isWaitingVipCodeInput[context.chat.id] = false;
    } else {
      await this.#bot.sendMessage(context.chat.id, this.#wrongCipInstructionText, this.#cancelVipReplyMarkup);
    }
  }
}

module.exports = Bot;
